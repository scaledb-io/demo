name: Multi-platform Docker Compose Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allows manual trigger

jobs:
  test-compose:
    name: Test on ${{ matrix.os }}
    strategy:
      fail-fast: false # Continue testing other platforms even if one fails
      matrix:
        os: 
          - ubuntu-latest    # Linux x86_64
          # - macos-latest     # macOS ARM64 (M1/M2)
          # - macos-13         # macOS x86_64 (Intel)
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker (macOS)
        if: runner.os == 'macOS'
        run: |
          # Install Docker Desktop on macOS runners
          brew install --cask docker
          sudo /Applications/Docker.app/Contents/MacOS/Docker --unattended --install-privileged-components
          open -a Docker
          # Wait for Docker to start
          while ! docker system info > /dev/null 2>&1; do sleep 1; done

      - name: Display system info
        run: |
          echo "Runner OS: ${{ runner.os }}"
          echo "Runner Architecture: ${{ runner.arch }}"
          docker --version
          docker compose version
          uname -a

      - name: Check image architecture support
        run: |
          echo "Checking MySQL image architecture support..."
          docker buildx imagetools inspect mysql:8.0 --format "{{.Manifest.MediaType}}: {{.Manifest.Platform}}" || echo "MySQL inspection failed"
          
          echo "Checking ProxySQL image architecture support..."
          docker buildx imagetools inspect proxysql/proxysql:latest --format "{{.Manifest.MediaType}}: {{.Manifest.Platform}}" || echo "ProxySQL inspection failed"
          
          echo "Checking ReadySet image architecture support..."
          docker buildx imagetools inspect public.ecr.aws/readyset/readyset:latest --format "{{.Manifest.MediaType}}: {{.Manifest.Platform}}" || echo "ReadySet inspection failed"

      - name: Validate docker-compose configuration
        run: |
          docker compose config --quiet
          echo "✅ Docker Compose configuration is valid"

      - name: Pull images before starting
        run: |
          echo "Pre-pulling images to check platform compatibility..."
          docker compose pull

      - name: Start services
        run: |
          echo "Starting services..."
          docker compose up -d
          
          echo "Waiting for services to be ready..."
          sleep 45
          
          echo "Checking service status..."
          docker compose ps
          
          echo "Checking service logs..."
          docker compose logs --tail=20

      - name: Health check services
        run: |
          echo "=== MySQL Health Check ==="
          # Wait for MySQL to be ready
          timeout=60
          while [ $timeout -gt 0 ]; do
            if docker compose exec -T db mysqladmin ping -h"127.0.0.1" -uroot -proot_password --silent; then
              echo "✅ MySQL is responding"
              break
            fi
            echo "Waiting for MySQL... ($timeout seconds remaining)"
            sleep 2
            timeout=$((timeout-2))
          done
          
          if [ $timeout -le 0 ]; then
            echo "❌ MySQL failed to start within timeout"
            docker compose logs db
            exit 1
          fi
          
          echo "=== ProxySQL Health Check ==="
          # Check ProxySQL admin interface
          timeout=30
          while [ $timeout -gt 0 ]; do
            if docker compose exec -T proxysql mysql -h127.0.0.1 -P6032 -uradmin -pradmin -e "SELECT 1;" > /dev/null 2>&1; then
              echo "✅ ProxySQL admin interface is responding"
              break
            fi
            echo "Waiting for ProxySQL... ($timeout seconds remaining)"
            sleep 2
            timeout=$((timeout-2))
          done
          
          echo "=== ReadySet Health Check ==="
          # Check if ReadySet is responding (adjust port/method as needed)
          if docker compose ps readyset | grep -q "Up"; then
            echo "✅ ReadySet container is running"
          else
            echo "❌ ReadySet container is not running"
            docker compose logs readyset
            exit 1
          fi

      - name: Test database connectivity
        run: |
          echo "=== Testing MySQL connectivity ==="
          docker compose exec -T db mysql -h127.0.0.1 -uroot -proot_password -e "SELECT VERSION();"
          
          echo "=== Testing ProxySQL connectivity ==="
          docker compose exec -T proxysql mysql -h127.0.0.1 -P6033 -uroot -proot_password -e "SELECT 1 as test;"
          
          echo "=== Creating test database and table ==="
          docker compose exec -T db mysql -h127.0.0.1 -uroot -proot_password -e "
            CREATE DATABASE IF NOT EXISTS testdb;
            USE testdb;
            CREATE TABLE IF NOT EXISTS test_table (
              id INT AUTO_INCREMENT PRIMARY KEY,
              name VARCHAR(100),
              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
            INSERT INTO test_table (name) VALUES ('test1'), ('test2'), ('test3');
            SELECT COUNT(*) as row_count FROM test_table;
          "

      - name: Run basic sysbench test (if available)
        continue-on-error: true # Don't fail the workflow if sysbench isn't available
        run: |
          if command -v sysbench &> /dev/null; then
            echo "=== Running sysbench test ==="
            # Add your sysbench commands here
            sysbench --version
            # Example: sysbench oltp_read_write --mysql-host=127.0.0.1 --mysql-port=3306 --mysql-user=root --mysql-password=root_password prepare
          else
            echo "Sysbench not available on this platform, skipping performance test"
          fi

      - name: Display service logs on failure
        if: failure()
        run: |
          echo "=== Service Status ==="
          docker compose ps
          
          echo "=== MySQL Logs ==="
          docker compose logs db
          
          echo "=== ProxySQL Logs ==="
          docker compose logs proxysql
          
          echo "=== ReadySet Logs ==="
          docker compose logs readyset

      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up..."
          docker compose down -v
          docker system prune -f
